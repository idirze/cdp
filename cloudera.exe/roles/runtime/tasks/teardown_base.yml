---

# Copyright 2021 Cloudera, Inc. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Execute CDP Datahub teardown
  when: run__include_datahub
  cloudera.cloud.datahub_cluster:
    name: "{{ __datahub_config_item.name }}"
    state: absent
    wait: yes
  loop_control:
    loop_var: __datahub_config_item
    label: "{{ __datahub_config_item.name | default('datahub') }}"
  loop: "{{ run__datahub_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __datahub_teardowns_info

- name: Execute CDP OpDB teardown
  when: run__include_opdb
  cloudera.cloud.opdb:
    env: "{{ run__env_name }}"
    name: "{{ __opdb_config.name }}"
    state: absent
    wait: yes
  loop_control:
    loop_var: __opdb_config
    label: "{{ __opdb_config.name | default('opdb') }}"
  loop: "{{ run__opdb_definitions }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __opdb_teardowns_info

- name: Execute CDP DW cluster teardown
  when: run__include_dw
  cloudera.cloud.dw_cluster:
    env: "{{ run__env_name }}"
    state: absent
    wait: yes
  async: 3600 # 1 hour timeout
  poll: 0
  register: __dw_teardowns_info

- name: Execute CDP Dataflow teardown
  when: run__include_df
  cloudera.cloud.df:
    name: "{{ run__env_name }}"
    persist: "{{ run__df_persist }}"
    state: absent
    wait: yes
  async: 3600 # 1 hour timeout
  poll: 0
  register: __df_teardown_info

- name: Execute CDP ML Workspace teardown
  when: run__include_ml
  cloudera.cloud.ml:
    name: "{{ __ml_config_item.name }}"
    env: "{{ run__env_name }}"
    state: absent
  loop_control:
    loop_var: __ml_config_item
    label: "{{ __ml_config_item.name | default('ml') }}"
  loop: "{{ run__ml_configs }}"
  async: 3600 # 1 hour timeout
  poll: 0
  register: __ml_teardowns_info

- name: Wait for CDP ML Workspace deployments to decommission
  when: run__include_ml
  ansible.builtin.async_status:
    jid: "{{ __ml_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __ml_teardown
    label: "{{ __ml_teardown.__ml_config_item.name | default('ml') }}"
  loop: "{{ __ml_teardowns_info.results }}"
  register: __ml_teardowns_async
  until: __ml_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP Datahub deployments to decommission
  when: run__include_datahub
  ansible.builtin.async_status:
    jid: "{{ __datahub_teardown_item.ansible_job_id }}"
  loop_control:
    loop_var: __datahub_teardown_item
    label: "{{ __datahub_teardown_item.__datahub_config_item.name | default('datahub') }}"
  loop: "{{ __datahub_teardowns_info.results }}"
  register: __datahub_teardowns_async
  until: __datahub_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP DW deployments to decommission
  when: run__include_dw
  ansible.builtin.async_status:
    jid: "{{ __dw_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __dw_teardown
    label: "{{ __dw_teardown.__dw_config.name | default('dw') }}"
  loop: "{{ __dw_teardowns_info.results }}"
  register: __dw_teardowns_async
  until: __dw_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP OpDB deployments to decommission
  when: run__include_opdb
  ansible.builtin.async_status:
    jid: "{{ __opdb_teardown.ansible_job_id }}"
  loop_control:
    loop_var: __opdb_teardown
    label: "{{ __opdb_teardown.__opdb_config.name | default('opdb') }}"
  loop: "{{ __opdb_teardowns_info.results }}"
  register: __opdb_teardowns_async
  until: __opdb_teardowns_async.finished
  retries: 120
  delay: 30

- name: Wait for CDP Dataflow deployment to decommission
  when: run__include_df
  ansible.builtin.async_status:
    jid: "{{ __df_teardown_info.ansible_job_id }}"
  register: __df_teardown_async
  until: __df_teardown_async.finished
  retries: 120
  delay: 30
